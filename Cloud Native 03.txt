■ Cloud Native 배포
   - 배포를 자동화하려면 API 기반 인프라스트럭처(IaaS)가 필요하다. 

■ 인프라스트럭처 표현
  - 토플로지 표현의 장점
      + 인프라 설계가 공유되고 점차적으로 버전을 변경할 수 있다. 
      + 설계를 고유한 상황에 맞게 분기하고 변경할 수 있다. 
      + 표현 => 문서화 , 
  - 독자가 사람인 경우 이해하기 쉽게 만들어야 한다. (도표, 추상화 된 코드)
    독자가 프로그램인 경우 구체적인 정보와 구현 필요
  - 해석에 가정은 안되며, 예측 가능해야 한다. 
  - 도표나 그림으로 표현 시 
      + 브레인스토밍하고 전달에 효과적
      + 복잡한 인프라 설계를 빠르고 확실하게 표현
      + 사람예 적합하지만, 컴퓨터는 이해할 수 없다. 
  - 스크립트로 표현
      + 반복 작업 시 오류를 감소시킴, 그러나, 스크립트는 상태를 고려하지 않음 (실행에 중점) : 선언적 상태의 결핍
      + 자동화 (단, 정확성이나 성공을 의미하지 않음), 스크립트 수행 각 단계 결과에 대한 해석이 필요 
  - IaC : 관리 부담과 유지비용 감소가 목적 --> 추상화 
      + 기존에는 구성 관리로 대응 --> 복잡도 증가
      + 인프라는 서로 통신으로 연결됨, 따라서 권한 설정, 조정, 저수준 추상화도 관리 필요
      + Terraform , 1st Generation : DSL(Domain Specific Language)로 인프라 표현   
           --> 인프라 아키텍처를 소프트웨어처럼 다루게 됨
  - 소프트웨어로서 인프라스트럭처
      + IaC는 올바른 방향이지만 정적 표현 위주로 한계가 있음
      + 인프라 표현을 특정 상태로 만들기 위한 데이터로 간주 --> 버전 관리 
          --> API로 작동하는 플랫폼은 코드로 인프라를 표준화 가능 : 시간에 따른 버전 관리가 가능 (API Versioning)

■ 배포 도구
   - 인프라를 소프트웨어 영역에 접근시킴에 따라 인프라 배포 도구도 변경됨 (관련 오픈소스 증가)
   - CNI의 첫 단계는 스크립트를 이용해 지속적인 실행을 스케줄링하는 것
      + 좋은 배포 도구는 사람의 개입 없이 모든 작업을 수행하는 도구  
   - 멱등성 
       + 동일한 입력을 지속적으로 받고, 항상 동일한 결과가 나오는 성질
       + 인프라의 추가 삭제가 계속되어도 동일 작업은 항상 동일 결과가 나와야 함 ==> 자동화 가능
       + 인프라에 대한 분석 수행도 가능해진다. 
   - 실패 처리 
       + 실패를 염두하고 배포 도구를 설계해야 함 --> 경고 및 통보 , 로그 
       + 실패를 예방할 수 있도록 코드를 변경하고, 실패 시 계속 보완해야 함
       + 부분의 실패와 시스템의 실패는 구분
   - 결과적 일관성 
       + 시간이 자나면서 시스템을 조정하려고 시도하는 것 (신뢰할 수 있는 시스템을 선택하라)
   - 원자성 
       + 작업을 완료할 수 없으면 변경 내용을 되돌리고 작업을 완전한 실패로 만든다. 
       + All or Nothing
